// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Header handles button click event 1`] = `
<View
  pointerEvents="box-none"
  style={
    Object {
      "flex": 1,
    }
  }
>
  <View
    collapsable={true}
    pointerEvents="box-none"
    style={
      Object {
        "flex": 1,
      }
    }
  >
    <View>
      <SafeAreaView
        style={
          Object {
            "backgroundColor": "rgba(0,0,0,0.5)",
          }
        }
      >
        <View
          style={
            Array [
              Object {
                "backgroundColor": "transparent",
                "borderBottomColor": "transparent",
                "borderBottomWidth": 0.5,
                "elevation": 0,
                "flexDirection": "row",
                "height": 64,
                "justifyContent": "center",
                "left": 0,
                "paddingLeft": 6,
                "paddingRight": 10,
                "paddingTop": 18,
                "right": 0,
                "shadowColor": null,
                "shadowOffset": null,
                "shadowOpacity": null,
                "shadowRadius": null,
                "top": 0,
              },
              Object {
                "backgroundColor": "rgba(0,0,0,0.5)",
                "width": "100%",
              },
            ]
          }
          testID="header"
          transparent={true}
        >
          <View
            style={
              Object {
                "alignItems": "flex-end",
                "alignSelf": "center",
                "flex": 1,
                "flexDirection": "row",
                "justifyContent": "flex-end",
              }
            }
          >
            <
              activeOpacity={0.5}
              style={
                Object {
                  "alignItems": "center",
                  "alignSelf": null,
                  "backgroundColor": "transparent",
                  "borderBottomWidth": null,
                  "borderColor": null,
                  "borderLeftWidth": null,
                  "borderRadius": 50,
                  "borderRightWidth": null,
                  "borderTopWidth": null,
                  "borderWidth": undefined,
                  "elevation": 0,
                  "flexDirection": "row",
                  "height": 45,
                  "justifyContent": "space-between",
                  "marginRight": -9,
                  "paddingBottom": 6,
                  "paddingLeft": 15,
                  "paddingRight": 15,
                  "paddingTop": 6,
                  "shadowColor": null,
                  "shadowOffset": null,
                  "shadowOpacity": null,
                  "shadowRadius": null,
                }
              }
              testID="button"
              transparent={true}
            >
              <Text
                style={
                  Array [
                    Object {
                      "backgroundColor": "transparent",
                      "color": "#007aff",
                      "fontFamily": "System",
                      "fontSize": 17,
                      "marginLeft": 0,
                      "marginRight": 0,
                      "paddingLeft": 16,
                      "paddingRight": 0,
                      "top": 1,
                    },
                    Object {
                      "color": "rgba(255,255,255,0.5)",
                      "fontFamily": "Roboto",
                      "fontSize": 14,
                      "fontStyle": "normal",
                      "fontWeight": "normal",
                      "lineHeight": 16,
                      "textAlign": "center",
                    },
                  ]
                }
                uppercase={false}
              >
                Skip
              </Text>
            </>
          </View>
        </View>
      </SafeAreaView>
    </View>
  </View>
  <View
    style={
      Object {
        "bottom": 0,
        "position": "absolute",
        "width": "100%",
      }
    }
  >
    <View
      pointerEvents="box-none"
      style={
        Object {
          "bottom": "100%",
          "flexDirection": "row",
          "justifyContent": "flex-end",
          "paddingBottom": 4,
          "paddingEnd": 4,
          "position": "absolute",
          "width": "100%",
        }
      }
    >
      <TouchableWithoutFeedback
        hitSlop={
          Object {
            "bottom": 4,
            "left": 4,
            "right": 4,
            "top": 4,
          }
        }
      >
        <View
          style={
            Array [
              Object {
                "backgroundColor": "rgba(250, 186, 48, 0.95)",
              },
              Object {
                "borderRadius": 14,
                "height": 28,
                "justifyContent": "center",
                "paddingHorizontal": 12,
              },
            ]
          }
        >
          <Text
            numberOfLines={1}
            style={
              Object {
                "color": "rgba(255, 255, 255, 1)",
                "fontSize": 12,
                "includeFontPadding": false,
                "lineHeight": 16,
              }
            }
          >
            Dismiss All
          </Text>
        </View>
      </TouchableWithoutFeedback>
    </View>
    <ScrollView
      data={
        Array [
          Object {
            "category": "Function components cannot be given refs. Attempts to access this ref will fail. Did you mean to use React.forwardRef()?﻿%s﻿%s",
            "warnings": Array [
              YellowBoxWarning {
                "message": Object {
                  "content": "Function components cannot be given refs. Attempts to access this ref will fail. Did you mean to use React.forwardRef()?

Check the render method of \`Button\`.
    in TouchableOpacity (at Button.js:79)
    in Button (created by Styled(Button))
    in Styled(Button) (created by Header)
    in View (created by View)
    in View (at Right.js:10)
    in Right (created by Styled(Right))
    in Styled(Right) (created by Header)
    in View (created by View)
    in View (at Header.js:54)
    in SafeAreaView (created by SafeAreaView)
    in SafeAreaView (at Header.js:49)
    in View (created by View)
    in View (at Header.js:33)
    in Header (created by Styled(Header))
    in Styled(Header) (created by Context.Consumer)
    in StyledNativeComponent (created by Styled(Styled(Header)))
    in Styled(Styled(Header)) (created by Header)
    in Header
    in ThemeProvider
    in View (created by View)
    in View (created by AppContainer)
    in View (created by View)
    in View (created by AppContainer)
    in AppContainer (at src/index.js:26)",
                  "substitutions": Array [
                    Object {
                      "length": 38,
                      "offset": 120,
                    },
                    Object {
                      "length": 891,
                      "offset": 158,
                    },
                  ],
                },
                "stack": Array [
                  Object {
                    "arguments": Array [],
                    "column": 29,
                    "file": "C:\\\\Users\\\\Josiah\\\\Documents\\\\AppProjects\\\\hightable\\\\node_modules\\\\react-native\\\\Libraries\\\\YellowBox\\\\Data\\\\YellowBoxWarning.js",
                    "lineNumber": 58,
                    "methodName": "Function.parse",
                  },
                  Object {
                    "arguments": Array [],
                    "column": 56,
                    "file": "C:\\\\Users\\\\Josiah\\\\Documents\\\\AppProjects\\\\hightable\\\\node_modules\\\\react-native\\\\Libraries\\\\YellowBox\\\\YellowBox.js",
                    "lineNumber": 180,
                    "methodName": "registerError",
                  },
                  Object {
                    "arguments": Array [],
                    "column": 21,
                    "file": "C:\\\\Users\\\\Josiah\\\\Documents\\\\AppProjects\\\\hightable\\\\node_modules\\\\react-native\\\\Libraries\\\\YellowBox\\\\YellowBox.js",
                    "lineNumber": 84,
                    "methodName": "errorImpl",
                  },
                  Object {
                    "arguments": Array [],
                    "column": 13,
                    "file": "C:\\\\Users\\\\Josiah\\\\Documents\\\\AppProjects\\\\hightable\\\\node_modules\\\\react-native\\\\Libraries\\\\YellowBox\\\\YellowBox.js",
                    "lineNumber": 63,
                    "methodName": "BufferedConsole.Object.<anonymous>.console.error",
                  },
                  Object {
                    "arguments": Array [],
                    "column": 29,
                    "file": "C:\\\\Users\\\\Josiah\\\\Documents\\\\AppProjects\\\\hightable\\\\node_modules\\\\react-test-renderer\\\\cjs\\\\react-test-renderer.development.js",
                    "lineNumber": 120,
                    "methodName": "printWarning",
                  },
                  Object {
                    "arguments": Array [],
                    "column": 4,
                    "file": "C:\\\\Users\\\\Josiah\\\\Documents\\\\AppProjects\\\\hightable\\\\node_modules\\\\react-test-renderer\\\\cjs\\\\react-test-renderer.development.js",
                    "lineNumber": 92,
                    "methodName": "error",
                  },
                  Object {
                    "arguments": Array [],
                    "column": 8,
                    "file": "C:\\\\Users\\\\Josiah\\\\Documents\\\\AppProjects\\\\hightable\\\\node_modules\\\\react-test-renderer\\\\cjs\\\\react-test-renderer.development.js",
                    "lineNumber": 8004,
                    "methodName": "validateFunctionComponentInDev",
                  },
                  Object {
                    "arguments": Array [],
                    "column": 6,
                    "file": "C:\\\\Users\\\\Josiah\\\\Documents\\\\AppProjects\\\\hightable\\\\node_modules\\\\react-test-renderer\\\\cjs\\\\react-test-renderer.development.js",
                    "lineNumber": 7971,
                    "methodName": "mountIndeterminateComponent",
                  },
                  Object {
                    "arguments": Array [],
                    "column": 15,
                    "file": "C:\\\\Users\\\\Josiah\\\\Documents\\\\AppProjects\\\\hightable\\\\node_modules\\\\react-test-renderer\\\\cjs\\\\react-test-renderer.development.js",
                    "lineNumber": 9019,
                    "methodName": "beginWork",
                  },
                  Object {
                    "arguments": Array [],
                    "column": 11,
                    "file": "C:\\\\Users\\\\Josiah\\\\Documents\\\\AppProjects\\\\hightable\\\\node_modules\\\\react-test-renderer\\\\cjs\\\\react-test-renderer.development.js",
                    "lineNumber": 12649,
                    "methodName": "performUnitOfWork",
                  },
                ],
                "symbolicated": Object {
                  "error": null,
                  "stack": null,
                  "status": "NONE",
                },
              },
            ],
          },
        ]
      }
      disableVirtualization={false}
      horizontal={false}
      initialNumToRender={10}
      maxToRenderPerBatch={10}
      onEndReachedThreshold={2}
      removeClippedSubviews={false}
      scrollEnabled={false}
      scrollEventThrottle={50}
      scrollsToTop={false}
      stickyHeaderIndices={Array []}
      style={
        Object {
          "height": 48.5,
        }
      }
      updateCellsBatchingPeriod={50}
      viewabilityConfigCallbackPairs={Array []}
      windowSize={21}
    >
      <View
        style={null}
      >
        <TouchableWithoutFeedback>
          <View
            style={
              Array [
                Object {
                  "backgroundColor": "rgba(250, 186, 48, 0.95)",
                },
                Object {
                  "height": 48,
                  "justifyContent": "center",
                  "marginTop": 0.5,
                  "paddingHorizontal": 12,
                },
              ]
            }
          >
            <View
              style={
                Object {
                  "alignItems": "flex-start",
                  "flexDirection": "row",
                }
              }
            >
              <Text
                numberOfLines={2}
                style={
                  Object {
                    "color": "rgba(255, 255, 255, 1)",
                    "flex": 1,
                    "fontSize": 14,
                    "includeFontPadding": false,
                    "lineHeight": 18,
                  }
                }
              >
                <Text>
                  Function components cannot be given refs. Attempts to access this ref will fail. Did you mean to use React.forwardRef()?
                </Text>
                <Text
                  style={
                    Object {
                      "color": "rgba(255, 255, 255, 0.6)",
                    }
                  }
                >
                  

Check the render method of \`Button\`.
                </Text>
                <Text
                  style={
                    Object {
                      "color": "rgba(255, 255, 255, 0.6)",
                    }
                  }
                >
                  
    in TouchableOpacity (at Button.js:79)
    in Button (created by Styled(Button))
    in Styled(Button) (created by Header)
    in View (created by View)
    in View (at Right.js:10)
    in Right (created by Styled(Right))
    in Styled(Right) (created by Header)
    in View (created by View)
    in View (at Header.js:54)
    in SafeAreaView (created by SafeAreaView)
    in SafeAreaView (at Header.js:49)
    in View (created by View)
    in View (at Header.js:33)
    in Header (created by Styled(Header))
    in Styled(Header) (created by Context.Consumer)
    in StyledNativeComponent (created by Styled(Styled(Header)))
    in Styled(Styled(Header)) (created by Header)
    in Header
    in ThemeProvider
    in View (created by View)
    in View (created by AppContainer)
    in View (created by View)
    in View (created by AppContainer)
    in AppContainer (at src/index.js:26)
                </Text>
              </Text>
            </View>
          </View>
        </TouchableWithoutFeedback>
      </View>
    </ScrollView>
    <SafeAreaView
      style={
        Object {
          "backgroundColor": "rgba(250, 186, 48, 0.95)",
          "marginTop": 0.5,
        }
      }
    />
  </View>
</View>
`;

exports[`Header renders properly with button 1`] = `
<View
  pointerEvents="box-none"
  style={
    Object {
      "flex": 1,
    }
  }
>
  <View
    collapsable={true}
    pointerEvents="box-none"
    style={
      Object {
        "flex": 1,
      }
    }
  >
    <View>
      <SafeAreaView
        style={
          Object {
            "backgroundColor": "rgba(0,0,0,0.5)",
          }
        }
      >
        <View
          style={
            Array [
              Object {
                "backgroundColor": "transparent",
                "borderBottomColor": "transparent",
                "borderBottomWidth": 0.5,
                "elevation": 0,
                "flexDirection": "row",
                "height": 64,
                "justifyContent": "center",
                "left": 0,
                "paddingLeft": 6,
                "paddingRight": 10,
                "paddingTop": 18,
                "right": 0,
                "shadowColor": null,
                "shadowOffset": null,
                "shadowOpacity": null,
                "shadowRadius": null,
                "top": 0,
              },
              Object {
                "backgroundColor": "rgba(0,0,0,0.5)",
                "width": "100%",
              },
            ]
          }
          testID="header"
          transparent={true}
        >
          <View
            style={
              Object {
                "alignItems": "flex-end",
                "alignSelf": "center",
                "flex": 1,
                "flexDirection": "row",
                "justifyContent": "flex-end",
              }
            }
          >
            <
              activeOpacity={0.5}
              style={
                Object {
                  "alignItems": "center",
                  "alignSelf": null,
                  "backgroundColor": "transparent",
                  "borderBottomWidth": null,
                  "borderColor": null,
                  "borderLeftWidth": null,
                  "borderRadius": 50,
                  "borderRightWidth": null,
                  "borderTopWidth": null,
                  "borderWidth": undefined,
                  "elevation": 0,
                  "flexDirection": "row",
                  "height": 45,
                  "justifyContent": "space-between",
                  "marginRight": -9,
                  "paddingBottom": 6,
                  "paddingLeft": 15,
                  "paddingRight": 15,
                  "paddingTop": 6,
                  "shadowColor": null,
                  "shadowOffset": null,
                  "shadowOpacity": null,
                  "shadowRadius": null,
                }
              }
              testID="button"
              transparent={true}
            >
              <Text
                style={
                  Array [
                    Object {
                      "backgroundColor": "transparent",
                      "color": "#007aff",
                      "fontFamily": "System",
                      "fontSize": 17,
                      "marginLeft": 0,
                      "marginRight": 0,
                      "paddingLeft": 16,
                      "paddingRight": 0,
                      "top": 1,
                    },
                    Object {
                      "color": "rgba(255,255,255,0.5)",
                      "fontFamily": "Roboto",
                      "fontSize": 14,
                      "fontStyle": "normal",
                      "fontWeight": "normal",
                      "lineHeight": 16,
                      "textAlign": "center",
                    },
                  ]
                }
                uppercase={false}
              >
                Skip
              </Text>
            </>
          </View>
        </View>
      </SafeAreaView>
    </View>
  </View>
  <View
    style={
      Object {
        "bottom": 0,
        "position": "absolute",
        "width": "100%",
      }
    }
  >
    <View
      pointerEvents="box-none"
      style={
        Object {
          "bottom": "100%",
          "flexDirection": "row",
          "justifyContent": "flex-end",
          "paddingBottom": 4,
          "paddingEnd": 4,
          "position": "absolute",
          "width": "100%",
        }
      }
    >
      <TouchableWithoutFeedback
        hitSlop={
          Object {
            "bottom": 4,
            "left": 4,
            "right": 4,
            "top": 4,
          }
        }
      >
        <View
          style={
            Array [
              Object {
                "backgroundColor": "rgba(250, 186, 48, 0.95)",
              },
              Object {
                "borderRadius": 14,
                "height": 28,
                "justifyContent": "center",
                "paddingHorizontal": 12,
              },
            ]
          }
        >
          <Text
            numberOfLines={1}
            style={
              Object {
                "color": "rgba(255, 255, 255, 1)",
                "fontSize": 12,
                "includeFontPadding": false,
                "lineHeight": 16,
              }
            }
          >
            Dismiss All
          </Text>
        </View>
      </TouchableWithoutFeedback>
    </View>
    <ScrollView
      data={
        Array [
          Object {
            "category": "Function components cannot be given refs. Attempts to access this ref will fail. Did you mean to use React.forwardRef()?﻿%s﻿%s",
            "warnings": Array [
              YellowBoxWarning {
                "message": Object {
                  "content": "Function components cannot be given refs. Attempts to access this ref will fail. Did you mean to use React.forwardRef()?

Check the render method of \`Button\`.
    in TouchableOpacity (at Button.js:79)
    in Button (created by Styled(Button))
    in Styled(Button) (created by Header)
    in View (created by View)
    in View (at Right.js:10)
    in Right (created by Styled(Right))
    in Styled(Right) (created by Header)
    in View (created by View)
    in View (at Header.js:54)
    in SafeAreaView (created by SafeAreaView)
    in SafeAreaView (at Header.js:49)
    in View (created by View)
    in View (at Header.js:33)
    in Header (created by Styled(Header))
    in Styled(Header) (created by Context.Consumer)
    in StyledNativeComponent (created by Styled(Styled(Header)))
    in Styled(Styled(Header)) (created by Header)
    in Header
    in ThemeProvider
    in View (created by View)
    in View (created by AppContainer)
    in View (created by View)
    in View (created by AppContainer)
    in AppContainer (at src/index.js:26)",
                  "substitutions": Array [
                    Object {
                      "length": 38,
                      "offset": 120,
                    },
                    Object {
                      "length": 891,
                      "offset": 158,
                    },
                  ],
                },
                "stack": Array [
                  Object {
                    "arguments": Array [],
                    "column": 29,
                    "file": "C:\\\\Users\\\\Josiah\\\\Documents\\\\AppProjects\\\\hightable\\\\node_modules\\\\react-native\\\\Libraries\\\\YellowBox\\\\Data\\\\YellowBoxWarning.js",
                    "lineNumber": 58,
                    "methodName": "Function.parse",
                  },
                  Object {
                    "arguments": Array [],
                    "column": 56,
                    "file": "C:\\\\Users\\\\Josiah\\\\Documents\\\\AppProjects\\\\hightable\\\\node_modules\\\\react-native\\\\Libraries\\\\YellowBox\\\\YellowBox.js",
                    "lineNumber": 180,
                    "methodName": "registerError",
                  },
                  Object {
                    "arguments": Array [],
                    "column": 21,
                    "file": "C:\\\\Users\\\\Josiah\\\\Documents\\\\AppProjects\\\\hightable\\\\node_modules\\\\react-native\\\\Libraries\\\\YellowBox\\\\YellowBox.js",
                    "lineNumber": 84,
                    "methodName": "errorImpl",
                  },
                  Object {
                    "arguments": Array [],
                    "column": 13,
                    "file": "C:\\\\Users\\\\Josiah\\\\Documents\\\\AppProjects\\\\hightable\\\\node_modules\\\\react-native\\\\Libraries\\\\YellowBox\\\\YellowBox.js",
                    "lineNumber": 63,
                    "methodName": "BufferedConsole.Object.<anonymous>.console.error",
                  },
                  Object {
                    "arguments": Array [],
                    "column": 29,
                    "file": "C:\\\\Users\\\\Josiah\\\\Documents\\\\AppProjects\\\\hightable\\\\node_modules\\\\react-test-renderer\\\\cjs\\\\react-test-renderer.development.js",
                    "lineNumber": 120,
                    "methodName": "printWarning",
                  },
                  Object {
                    "arguments": Array [],
                    "column": 4,
                    "file": "C:\\\\Users\\\\Josiah\\\\Documents\\\\AppProjects\\\\hightable\\\\node_modules\\\\react-test-renderer\\\\cjs\\\\react-test-renderer.development.js",
                    "lineNumber": 92,
                    "methodName": "error",
                  },
                  Object {
                    "arguments": Array [],
                    "column": 8,
                    "file": "C:\\\\Users\\\\Josiah\\\\Documents\\\\AppProjects\\\\hightable\\\\node_modules\\\\react-test-renderer\\\\cjs\\\\react-test-renderer.development.js",
                    "lineNumber": 8004,
                    "methodName": "validateFunctionComponentInDev",
                  },
                  Object {
                    "arguments": Array [],
                    "column": 6,
                    "file": "C:\\\\Users\\\\Josiah\\\\Documents\\\\AppProjects\\\\hightable\\\\node_modules\\\\react-test-renderer\\\\cjs\\\\react-test-renderer.development.js",
                    "lineNumber": 7971,
                    "methodName": "mountIndeterminateComponent",
                  },
                  Object {
                    "arguments": Array [],
                    "column": 15,
                    "file": "C:\\\\Users\\\\Josiah\\\\Documents\\\\AppProjects\\\\hightable\\\\node_modules\\\\react-test-renderer\\\\cjs\\\\react-test-renderer.development.js",
                    "lineNumber": 9019,
                    "methodName": "beginWork",
                  },
                  Object {
                    "arguments": Array [],
                    "column": 11,
                    "file": "C:\\\\Users\\\\Josiah\\\\Documents\\\\AppProjects\\\\hightable\\\\node_modules\\\\react-test-renderer\\\\cjs\\\\react-test-renderer.development.js",
                    "lineNumber": 12649,
                    "methodName": "performUnitOfWork",
                  },
                ],
                "symbolicated": Object {
                  "error": null,
                  "stack": null,
                  "status": "NONE",
                },
              },
            ],
          },
        ]
      }
      disableVirtualization={false}
      horizontal={false}
      initialNumToRender={10}
      maxToRenderPerBatch={10}
      onEndReachedThreshold={2}
      removeClippedSubviews={false}
      scrollEnabled={false}
      scrollEventThrottle={50}
      scrollsToTop={false}
      stickyHeaderIndices={Array []}
      style={
        Object {
          "height": 48.5,
        }
      }
      updateCellsBatchingPeriod={50}
      viewabilityConfigCallbackPairs={Array []}
      windowSize={21}
    >
      <View
        style={null}
      >
        <TouchableWithoutFeedback>
          <View
            style={
              Array [
                Object {
                  "backgroundColor": "rgba(250, 186, 48, 0.95)",
                },
                Object {
                  "height": 48,
                  "justifyContent": "center",
                  "marginTop": 0.5,
                  "paddingHorizontal": 12,
                },
              ]
            }
          >
            <View
              style={
                Object {
                  "alignItems": "flex-start",
                  "flexDirection": "row",
                }
              }
            >
              <Text
                numberOfLines={2}
                style={
                  Object {
                    "color": "rgba(255, 255, 255, 1)",
                    "flex": 1,
                    "fontSize": 14,
                    "includeFontPadding": false,
                    "lineHeight": 18,
                  }
                }
              >
                <Text>
                  Function components cannot be given refs. Attempts to access this ref will fail. Did you mean to use React.forwardRef()?
                </Text>
                <Text
                  style={
                    Object {
                      "color": "rgba(255, 255, 255, 0.6)",
                    }
                  }
                >
                  

Check the render method of \`Button\`.
                </Text>
                <Text
                  style={
                    Object {
                      "color": "rgba(255, 255, 255, 0.6)",
                    }
                  }
                >
                  
    in TouchableOpacity (at Button.js:79)
    in Button (created by Styled(Button))
    in Styled(Button) (created by Header)
    in View (created by View)
    in View (at Right.js:10)
    in Right (created by Styled(Right))
    in Styled(Right) (created by Header)
    in View (created by View)
    in View (at Header.js:54)
    in SafeAreaView (created by SafeAreaView)
    in SafeAreaView (at Header.js:49)
    in View (created by View)
    in View (at Header.js:33)
    in Header (created by Styled(Header))
    in Styled(Header) (created by Context.Consumer)
    in StyledNativeComponent (created by Styled(Styled(Header)))
    in Styled(Styled(Header)) (created by Header)
    in Header
    in ThemeProvider
    in View (created by View)
    in View (created by AppContainer)
    in View (created by View)
    in View (created by AppContainer)
    in AppContainer (at src/index.js:26)
                </Text>
              </Text>
            </View>
          </View>
        </TouchableWithoutFeedback>
      </View>
    </ScrollView>
    <SafeAreaView
      style={
        Object {
          "backgroundColor": "rgba(250, 186, 48, 0.95)",
          "marginTop": 0.5,
        }
      }
    />
  </View>
</View>
`;

exports[`Header renders properly without button 1`] = `
<View
  pointerEvents="box-none"
  style={
    Object {
      "flex": 1,
    }
  }
>
  <View
    collapsable={true}
    pointerEvents="box-none"
    style={
      Object {
        "flex": 1,
      }
    }
  >
    <View>
      <SafeAreaView
        style={
          Object {
            "backgroundColor": "rgba(0,0,0,0.5)",
          }
        }
      >
        <View
          style={
            Array [
              Object {
                "backgroundColor": "transparent",
                "borderBottomColor": "transparent",
                "borderBottomWidth": 0.5,
                "elevation": 0,
                "flexDirection": "row",
                "height": 64,
                "justifyContent": "center",
                "left": 0,
                "paddingLeft": 6,
                "paddingRight": 10,
                "paddingTop": 18,
                "right": 0,
                "shadowColor": null,
                "shadowOffset": null,
                "shadowOpacity": null,
                "shadowRadius": null,
                "top": 0,
              },
              Object {
                "backgroundColor": "rgba(0,0,0,0.5)",
                "width": "100%",
              },
            ]
          }
          testID="header"
          transparent={true}
        />
      </SafeAreaView>
    </View>
  </View>
</View>
`;
